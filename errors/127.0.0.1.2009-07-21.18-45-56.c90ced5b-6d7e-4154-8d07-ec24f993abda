(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/hcvst/dev/web2py/applications/openid/controllers/auth.py'
p4
sS'code'
p5
S'# This controller handles login etc. in user() and\n# authorisation for data transfer to the relaying party in data()\n\ndef user():\n    views = {\'login\':dict(title=\'Please login\', text=\'\', dialogView=True),\n             \'register\':dict(title=\'Register an openID\', text=\'Sing up for your free openID. The fields up to and including password are required.\'),\n             \'profile\':dict(title=\'Your openID profile\', text=\'Update your profile using the form below. Please not that changing your nickname will not change your openid.\'),\n             \'change_password\':dict(title=\'Change password\', text=\'Please use the form below to change your password.\', dialogView=True),\n             \'retrieve_password\':dict(title=\'Retrieve password\', text=\'Please enter your email address into the form below.\', dialogView=True)\n            }\n    view = views.get(request.args[0], dict(title=\'\', text=\'\'))\n    view[\'form\'] = SPAN(auth(), _class=\'user_form\')\n    return view\n\n\ndef data():\n    form = FORM(INPUT(_type=\'submit\', _name=\'allow_once\', _value=\'Allow once\'),\n                INPUT(_type=\'submit\', _name=\'allow_always\', _value=\'Allow always\'),\n                INPUT(_type=\'submit\', _name=\'cancel\', _value=\'cancel\'),\n               )\n    print request.vars           \n    if \'allow_once\' in request.vars:\n        session.trust_root_once = session.trust_root\n        return redirect(session.oid_url)\n    if \'allow_always\' in request.vars:\n        query = (db.oid_trust.auth_user == auth.user.id) & (db.oid_trust.trust_root == session.trust_root)\n        assert db(query).count() == 0\n        db.oid_trust.insert(auth_user = auth.user, trust_root = session.trust_root)   \n        return redirect(session.oid_url) \n    if \'cancel\' in request.vars:\n        session.oid_cancel = True\n        return redirect(session.oid_url)\n                  \n    from openid.extensions.sreg import SRegRequest\n    orequest = session.oid_orequest\n    auth_user = auth.user.oid_name\n    oid_user = orequest.identity.split(\'/\').pop().lower()\n    if not orequest:\n        response.flash="An error occured!"\n        return response.render(\'auth/data-error.html\', dict(dialogView=True))\n    elif not session.oid_user_owns_id:\n        response.flash="Incorrect user!"\n        return response.render(\'auth/data-idmismatch.html\', dict(auth_user=auth_user, oid_user=oid_user, dialogView=True))\n    else:\n        response.flash="Authentication request from %s" % orequest.trust_root\n        return response.render(\'auth/data-approve.html\', dict(orequest=orequest, dialogView=True, form=form))\n\n#        body = "You are about to log in to %s as %s." % (orequest.trust_root, auth_user)\n#        sreg_req = SRegRequest.fromOpenIDRequest(orequest)\n#        if sreg_req.wereFieldsRequested():\n#            body += \'<br />In addition the site has requested the following information.\'\n#            if sreg_req.required:\n#                body += \'<h2>Required information</h2>\'\n#                for r in sreg_req.required:\n#                    body += r.capitalize()\n#            if sreg_req.optional:\n#                body += \'<h2>Optional information</h2>\'\n#                for o in sreg_req.optional:\n#                    body += o.capitalize()\n#            if sreg_req.policy_url:\n#                body += "The site\'s data usage policy can be found here: <a href=\'%(url)s\'>%(url)s</a>" % {"url":sreg_req.policy_url}\n#            else:\n#                body += """This site did not include a link to their data usage policy. \n#                           This might be a bad thing. If you are the site-admin please\n#                           consider adding one."""\n                    \n        resp = dict(body=body)\n    return resp\n    \n    if request.args:\n        mode = request.args[0]\n        if mode == \'once\':\n            session.trust_root_once = session.trust_root\n        elif mode == \'trust\':\n            query = (db.oid_trust.auth_user == auth.user.id) & (db.oid_trust.trust_root == session.trust_root)\n            assert db(query).count() == 0\n            db.oid_trust.insert(auth_user = auth.user, trust_root = session.trust_root)\n        elif mode == \'cancel\':\n            session.cancel = True\n        return redirect(session.oid_url)\n    else: return """\nGrant access to data?<br/>\n<a href="%s">Yes once</a> |<a href="%s">Yes always</a> |<a href="%s">No, cancel</a> \n""" % (URL(r=request,args=[\'once\']),URL(r=request,args=[\'trust\']),URL(r=request,args=[\'cancel\']))\n\ndef submit():\n    pass\n\n\nresponse._vars=response._caller(data)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/hcvst/dev/web2py/gluon/restricted.py", line 98, in restricted\n    exec ccode in environment\n  File "/home/hcvst/dev/web2py/applications/openid/controllers/auth.py", line 90, in <module>\n  File "/home/hcvst/dev/web2py/gluon/globals.py", line 75, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/hcvst/dev/web2py/applications/openid/controllers/auth.py", line 27, in data\n    assert db(query).count() == 0\nAssertionError\n'
p8
s.